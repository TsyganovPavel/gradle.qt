/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'nesayus' at '12/1/15 5:51 PM' with Gradle 2.9
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

apply plugin: 'cpp'

model {
    repositories {
        libs(PrebuiltLibraries) {
          QtHeaders {
            headers.srcDir "/usr/include/qt4/"
          }

          ["QtCore", "QtGui"].each { libName ->
               "${libName}" {
                headers.srcDir "/usr/include/qt4/${libName}" // <-- put the path to the qt header in here
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("/usr/lib/lib${libName}.so") // <-- put the path to the qt libs in here
                }
              }
          }
        }
    }

    components {
        main(NativeExecutableSpec) {
          sources {
              cpp {
                  lib library: 'QtHeaders', linkage: 'api'
                  lib library: 'QtCore', linkage: 'shared'
                  lib library: 'QtGui', linkage: 'shared'
              }
          }
        }
    }

}

import com.github.nesayus.gradle.qt.QtPlugin
apply plugin: QtPlugin

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

task tarData(type: Tar) {
    destinationDir = new File('build/archives')
    extension = 'tar.gz'
    compression = 'GZIP'
    baseName = 'data'
    into('/usr/bin') {
        from 'build/exe/main/main'
    }
}


task tarControl(type: Tar) {
    destinationDir = new File('build/archives')
    extension = 'tar.gz'
    compression = 'GZIP'
    baseName = 'control'
    into('./') {
        from 'build/tmp/CONTROL/control'
    }
    dependsOn 'createControl'
}

task createControl {
    def controlFileName = 'build/tmp/CONTROL/control' 
    doLast {
        def controlFile = new File(controlFileName)
        controlFile.getParentFile().mkdirs()
        controlFile.createNewFile()
        controlFile.text = "Package:        unknown" + 
                           "\nVersion:      1.0-20060530-r0" +
                           "\nDescription:  some test ipgk build by gradle" +
                           "\nArchitecture: armel" +
                           "\nSection:      extra" +
                           "\nPriority:     optional" +
                           "\nMaintainer:   some guy <some_guy@some_provider.de>" +
                           "\nHomepage:     http://www.some_provider.de" +
                           "\nDepends:      qt4" +
                           "\nSource:       http://www.beispieldomain.de/files/dreambox/sources" +
                           "\n\n" // <- this new line is important
    }
    outputs.file file(controlFileName)
}


task createDebianFile {
    def debianBinaryFileName = 'build/archives/debian-binary'
    doLast {
        def debianBinaryFile = new File(debianBinaryFileName)
        debianBinaryFile.getParentFile().mkdirs()
        debianBinaryFile.createNewFile()
        debianBinaryFile.text = "2.0\n" // <- the \n is important.
    }
    outputs.file file(debianBinaryFileName)
}

task createIpkg {
    def packageName = 'unknown'
    def extension = 'ipk'
    def destinationDir =  new File('build/packages')
    ext.ipkgFile = file("${destinationDir.absolutePath}/${packageName}.${extension}")

    def archiveDir = file('build/archives').absolutePath
    def debianFileName = "${archiveDir}/debian-binary"
    def dataArchiveFileName = "${archiveDir}/data.tar.gz"
    def controlArchiveFileName= "${archiveDir}/control.tar.gz"

    doLast {
        destinationDir.mkdirs()
        def command = "ar -q ${ipkgFile.path} ${debianFileName} ${dataArchiveFileName} ${controlArchiveFileName}"
        def arProcess = command.execute()
        arProcess.waitFor()
        if (arProcess.exitValue()) {
            println arProcess.err.text
        } 
    }

    dependsOn 'tarData'
    dependsOn 'tarControl'
    dependsOn 'createDebianFile'
    
    inputs.file files(debianFileName, dataArchiveFileName, controlArchiveFileName)
    outputs.file ipkgFile
}

def myFile = file("horst.text")

/*
//apply plugin: 'java'
apply plugin: 'maven-publish'
configurations {
    packages
}

// artifacts {
//         packages file: createIpkg.ipkgFile, name: 'my-artifact', type: 'debian package', builtBy: createIpkg
// }

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'org.gradle.sample'
            artifactId 'project1-sample'
            version '1.1'
            
            from components.main

            artifacts {
                packages file: createIpkg.ipkgFile, name: 'my-artifact', type: 'debian package', builtBy: createIpkg
            }
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url "$buildDir/repo"
        }
    }
}

// repositories {
//     flatDir {
//         name "fileRepo"
//         dirs "repo"
//     }
// }
// 
// uploadArchives {
//     repositories {
//         add project.repositories.fileRepo
//        ivy {
//            credentials {
//                username "username"
//                password "pw"
//            }
//            url "http://repo.mycompany.com"
//        }
//     }
// }
*/
